@using Chilicki.Commline.UserInterface.Resources
@using Chilicki.Commline.Domain.Enums
@using Chilicki.Commline.UserInterface.HtmlExtensions
@using Chilicki.Commline.Application.Enums

@{
    var lineRouteTypes = new List<SelectListItem> {
        new SelectListItem { Text = BaseResources.OneWay, Value = "false", Selected = true },
        new SelectListItem { Text = BaseResources.Circular, Value = "true" }
    };

    StopType dropdownStopType = StopType.Bus;
}

<div>
    @Html.Partial("~/Views/Shared/_Map.cshtml",
        new ViewDataDictionary { { "viewName", BaseResources.StopEditor } })
</div>

<div id="toolboxSidenav" class="sidenav-toolbox">
    <abbr title="@EditorResources.CreateStopToolDescription">
        <a id="createStopButton" class="toolbox-tool-button" onclick="setCurrentTool(this, '@EditorToolType.CreateStop')">@EditorResources.CreateStopTool</a>
    </abbr>
    <abbr title="@EditorResources.EditStopToolDescription">
        <a id="editStopButton" class="toolbox-tool-button" onclick="setCurrentTool(this, '@EditorToolType.EditStop')">@EditorResources.EditStopTool</a>
    </abbr>
    <abbr title="@EditorResources.RemoveStopToolDescription">
        <a id="removeStopButton" class="toolbox-tool-button" onclick="setCurrentTool(this, '@EditorToolType.RemoveStop')">@EditorResources.RemoveStopTool</a>
    </abbr>
</div>

<div id="newStopModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <form id="newStopForm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@EditorResources.GiveStopDetails</h4>
                </div>
                <div class="modal-body">
                    <p>
                        <label for="modalStopName">@EditorResources.StopName</label>
                        <input id="modalStopName" type="text" class="form-control" />
                    </p>
                    <p>
                        <label for="modalStopType">@EditorResources.StopType</label>
                        @Html.DropDownList("modalStopType", dropdownStopType.ToSelectList(), new { @class = "form-control" })
                    </p>
                    <p>
                        <label for="modalStopLongitude">@EditorResources.Longitude</label>
                        <input id="modalStopLongitude" type="number" step="any" min="0" class="form-control" />
                    </p>
                    <p>
                        <label for="modalStopLatitude">@EditorResources.Latitude</label>
                        <input id="modalStopLatitude" type="number" step="any" min="0" class="form-control" />
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-dismiss="modal"
                            onclick="addStopToAddedContainer()">
                        @BaseResources.Save
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        @BaseResources.Cancel
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div id="editStopModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <form id="editStopForm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@EditorResources.EditStopDetails</h4>
                </div>
                <div class="modal-body">
                    <p>
                        <label for="editModalStopName">@EditorResources.StopName</label>
                        <input id="editModalStopName" type="text" class="form-control" />
                    </p>
                    <p>
                        <label for="editModalStopType">@EditorResources.StopType</label>
                        @Html.DropDownList("editModalStopType", dropdownStopType.ToSelectList(), new { @class = "form-control" })
                    </p>
                    <p>
                        <label for="editModalStopLongitude">@EditorResources.Longitude</label>
                        <input id="editModalStopLongitude" type="number" step="any" min="0" class="form-control" />
                    </p>
                    <p>
                        <label for="editModalStopLatitude">@EditorResources.Latitude</label>
                        <input id="editModalStopLatitude" type="number" step="any" min="0" class="form-control" />
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-dismiss="modal"
                            onclick="addStopToEditedContainer()">
                        @BaseResources.Save
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        @BaseResources.Cancel
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div id="removeStopModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <form id="removeStopForm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@EditorResources.AreYouSureRemoveStop</h4>
                </div>
                <div class="modal-body" hidden></div>
                <div class="modal-footer">                    
                    <button type="submit" class="btn btn-primary" data-dismiss="modal"
                            onclick="removeStopAndAddToRemovedContainer()">
                        @BaseResources.Affirm
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        @BaseResources.Cancel
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>

    var toolboxOpened = false;

    var editedStops = { 'Added': [], 'Modified': [], 'Removed': [] };

    var lastEditedStopMarker;

    $(document).ready(function () {
        $("#toolboxButton").show();
        $("#toolboxButton").click(switchToolboxSidenav);
        $("#saveModification").show();
        $("#saveModification").click(saveStops);
        $("#searchButton").hide();
        switchToolboxSidenav();
        loadAllLines();
    });

    function saveStops() {
        var sendData = { 'stopsEditionModel': editedStops };
        $.post("@Url.Action("SaveStops", "Editor")",
            sendData,
            function (data, status) {   
                if (data.success !== undefined) {
                    location.reload();
                }
                else if (data.error !== undefined) {
                    alert('@BaseResources.ErrorOccured: ' + data.error);
                }    
            });
    }

    function onMapClick(coordinates) {
        if (currentTool == '@EditorToolType.CreateStop') {
            addStopAction(coordinates);                       
        }
    }

    function addStopToAddedContainer() {
        var longitude = $("#modalStopLongitude").val();
        var latitude = $("#modalStopLatitude").val();
        var newStop = {
            'Name': $("#modalStopName").val(),
            'StopType': $("#modalStopType").val(),
            'Longitude': longitude,
            'Latitude': latitude,
        };
        var lastCoordinates = new google.maps.LatLng(latitude, longitude);
        drawMarker(MAP, '', $("#modalStopName").val(), lastCoordinates, $("#modalStopType").val());
        allLines.Stops.push(newStop);
        editedStops.Added.push(newStop);
        $("#modalStopName").val('');
    }

    function addStopToEditedContainer() {
        var previousPosition = lastEditedStopMarker.position;
        var longitude = $("#editModalStopLongitude").val();
        var latitude = $("#editModalStopLatitude").val();
        var editedStop = {
            'Id': lastEditedStopMarker.id,
            'Name': $("#editModalStopName").val(),
            'StopType': $("#editModalStopType").val(),
            'Longitude': longitude,
            'Latitude': latitude,
        };
        lastEditedStopMarker.setPosition(new google.maps.LatLng(latitude, longitude));
        if (editedStop.Id !== "") {
            removeAllPolylines(MAP);
            $.each(allLines.Lines, function (i, line) {
                var editedStops = line.Stops.filter((stop) => { return stop.Id === editedStop.Id; });
                $.each(editedStops, function (i, stop) {
                    stop.Longitude = longitude;
                    stop.Latitude = latitude;
                });
            });
            drawAllLines(MAP, allLines.Lines);
            editedStops.Modified.push(editedStop);
        }
        else {
            removeStopFromAllContainers(editedStop.Id, previousPosition);
            editedStops.Added.push(editedStop);
        }        
        $("#editModalStopName").val('');
    }

    function removeStopAndAddToRemovedContainer() {
        var removedStop = {
            'Id': lastEditedStopMarker.id,
        };
        lastEditedStopMarker.setMap(null);
        removeStopFromAllContainers(lastEditedStopMarker.id, lastEditedStopMarker.position)
        if (removedStop.Id !== "") {
            editedStops.Removed.push(removedStop);
        }        
    }

    function removeStopFromAllContainers(stopId, coordinates) {
        editedStops.Added = editedStops.Added.filter(function (stop) {
            return stop.Latitude != coordinates.lat() && stop.Longitude != coordinates.lng();
        });
        editedStops.Modified = editedStops.Modified.filter(function (stop) {
            return stop.Id != stopId;
        });
        editedStops.Removed = editedStops.Removed.filter(function (stop) {
            return stop.Id != stopId;
        });
    }

    function addStopAction(coordinates) {
        $("#modalStopLongitude").val(coordinates.lng());
        $("#modalStopLatitude").val(coordinates.lat());
        $("#newStopModal").modal({ backdrop: "static" });        
    }

    function editStopAction(marker) {
        lastEditedStopMarker = marker;
        $("#editModalStopName").val(marker.title);
        $("#editModalStopType").val(marker.stopType);
        $("#editModalStopLongitude").val(marker.position.lng());
        $("#editModalStopLatitude").val(marker.position.lat());
        $("#editStopModal").modal({ backdrop: "static" }); 
    }

    function removeStopAction(marker) {
        lastEditedStopMarker = marker;
        $("#removeStopModal").modal({ backdrop: "static" }); 
    }

    function setCurrentTool(toolButton, newTool) {
        $(".toolbox-tool-button").css('color', '#818181')
        if (newTool != '@EditorToolType.None' && currentTool != newTool) {
            currentTool = newTool;
            $(toolButton).css('color', '#ffffff');
        }
        else {
            currentTool = '@EditorToolType.None';
            $(toolButton).css('color', '#818181');
        }
    }

    function switchToolboxSidenav() {
        if (toolboxOpened == false) {
            document.getElementById("toolboxSidenav").style.width = "250px";
            toolboxOpened = true;
        }
        else {
            document.getElementById("toolboxSidenav").style.width = "0";
            toolboxOpened = false;
        }
    }
</script>