@using Chilicki.Commline.UserInterface.Resources
@using Chilicki.Commline.Domain.Enums
@using Chilicki.Commline.UserInterface.HtmlExtensions

@{
    var lineRouteTypes = new List<SelectListItem> {
        new SelectListItem { Text = BaseResources.OneWay, Value = "false", Selected = true },
        new SelectListItem { Text = BaseResources.Circular, Value = "true" }
    };

    LineType dropdownSelectedLineType = LineType.Bus;
    StopType dropdownStopType = StopType.Bus;
}

<div>
    @Html.Partial("~/Views/Shared/_Map.cshtml",
        new ViewDataDictionary { { "viewName", BaseResources.Editor } })
</div>

<div id="toolboxSidenav" class="sidenav-toolbox">
    <abbr title="@EditorResources.BusStopToolDescription">
        <a id="stopToolButton" onclick="setCurrentTool(this, '@EditorToolType.CreateStop')">@EditorResources.CreateStopTool</a>
    </abbr>
    <abbr title="@EditorResources.BusStopToolDescription">
        <a id="lineToolButton" onclick="setCurrentTool(this, '@EditorToolType.CreateLine')">@EditorResources.LineTool</a>
    </abbr>
</div>

<div id="newStopModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <form id="newStopForm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@EditorResources.GiveStopDetails</h4>
                </div>
                <div class="modal-body">
                    <p>
                        <label>@EditorResources.StopName</label>
                        <input id="modalStopName" type="text" />
                    </p>
                    <p>
                        <label>@EditorResources.StopName</label>
                        @Html.DropDownList("modalStopType", dropdownStopType.ToSelectList())
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-dismiss="modal"
                            onclick="addStopToContainer()">
                        @BaseResources.Save
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        @BaseResources.Cancel
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div id="newLineModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@EditorResources.NewLineCreation</h4>
            </div>
            <div class="modal-body">
                <p>
                    <label>@EditorResources.LineName</label>
                    <input id="modalLineName" type="text" />
                </p>
                <p>
                    <label>@EditorResources.LineType</label>
                    @Html.DropDownList("modalLineType", dropdownSelectedLineType.ToSelectList())
                </p>
                <p>
                    <label>@EditorResources.LineColor</label>
                    <input id="modalLineColor" type="color" />
                </p>
                <p>
                    <label>@EditorResources.LineRouteType</label>
                    @Html.DropDownList("modalLineRouteType", new SelectList(lineRouteTypes, "Value", "Text"))
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal"
                        onclick="addLineToContainer()">
                    @BaseResources.Save
                </button>
                <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="cancelNewLineCreation()">
                    @BaseResources.Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<script>

    var toolboxOpened = false;

    var editedStops = { 'Added': [], 'Modified': [], 'Deleted': [] };
    var editedLines = { 'Added': [], 'Modified': [], 'Deleted': [] };
    var currentEditedLine = {};

    var lastCoordinates;

    $(document).ready(function () {
        $("#toolboxButton").show();
        $("#toolboxButton").click(switchToolboxSidenav);
        $("#saveModification").show();
        $("#saveModification").click(saveEverything);
    });

    function saveEverything() {
        saveStops();
        saveLines();
    }

    function saveStops() {
        var sendData = { 'stopsEditionModel': editedStops };
        $.post("Editor/SaveStops",
            sendData,
            function (data, status) {                
                if (data === "") 
                    editedStops = { 'Added': [], 'Modified': [], 'Deleted': [] };
                else
                    alert('@BaseResources.ErrorOccured: ' + data);
            });
    }

    function saveLines() {
        var sendData = { 'linesEditionModel': editedLines };
        $.post("Editor/SaveLines",
            sendData,
            function (data, status) {                
                if (data === "") {
                    editedLines = { 'Added': [], 'Modified': [], 'Deleted': [] };
                    location.reload();
                }
                else {
                    alert('@BaseResources.ErrorOccured: ' + data);
                }                    
            });
    }

    function onMapClick(coordinates) {
        if (currentTool == '@EditorToolType.CreateStop') {
            lastCoordinates = coordinates;
            $("#newStopModal").modal({ backdrop: "static" });            
        }
    }

    function addStopToLine(marker) {
        var sendData = { 'id': marker.id };
        $.post("Editor/GetStop",
            sendData,
            function (data, status) {
                currentEditedLine.Stops.push(data);
            });
    }

    function addLineToContainer() {
        var newLine = {
            'Name': $("#modalLineName").val(),
            'LineType': $("#modalLineType").val(),
            'Stops': [],
            'Color': $("#modalLineColor").val(),
            'IsCircular': $("#modalLineRouteType").val(),            
        };
        allLines.Lines.push(newLine);
        editedLines.Added.push(newLine);
        currentEditedLine = newLine;
        $("#modalLineName").val('');
        $("#modalLineNumber").val('');
    }

    function cancelNewLineCreation() {
        currentEditedLine = {};
        setCurrentTool("#lineToolButton", '@EditorToolType.None');
    }

    function addStopToContainer() {
        var stopType = castEnumValueToKey(stopTypes, $("#modalStopType").val());
        var newStop = {
            'Name': $("#modalStopName").val(),
            'StopType': stopType,
            'Longitude': lastCoordinates.lng(),
            'Latitude': lastCoordinates.lat(),
        };
        drawMarker(MAP, '', $("#modalStopName").val(), lastCoordinates, stopType);
        allLines.StopsWithoutLines.push(newStop);
        editedStops.Added.push(newStop);
        $("#modalStopName").val('');
    }

    function setCurrentTool(toolButton, newTool) {
        if (newTool != '@EditorToolType.None' && currentTool != newTool) {
            currentTool = newTool;
            $(toolButton).css('color', '#ffffff');
        }
        else {
            currentTool = '@EditorToolType.None';
            currentEditedLine = {};
            $(toolButton).css('color', '#818181');
        }
        if (currentTool == '@EditorToolType.CreateLine') {
            $("#newLineModal").modal();
        }
    }


    function castEnumValueToKey(enumTable, value) {
        for (var i = 0; i < Object.keys(enumTable).length; i++)
            if (enumTable[i] === value)
                return i;
        return false;
    }

    function switchToolboxSidenav() {
        if (toolboxOpened == false) {
            document.getElementById("toolboxSidenav").style.width = "250px";
            toolboxOpened = true;
        }
        else {
            document.getElementById("toolboxSidenav").style.width = "0";
            toolboxOpened = false;
        }
    }
</script>