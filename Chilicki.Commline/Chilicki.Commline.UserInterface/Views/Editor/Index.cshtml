@using Chilicki.Commline.UserInterface.Resources
@using Chilicki.Commline.Domain.Enums

<div>
    @Html.Partial("~/Views/Shared/_Map.cshtml", 
        new ViewDataDictionary { { "viewName", BaseResources.Editor } })
</div>

<div id="toolboxSidenav" class="sidenav-toolbox">
    <abbr title="@EditorResources.BusStopToolDescription">
        <a id="stopToolButton" onclick="setCurrentTool(this, '@EditorToolType.BusStop')">@EditorResources.BusStopTool</a>
    </abbr>
    <abbr title="@EditorResources.BusStopToolDescription">
        <a id="lineToolButton" onclick="setCurrentTool(this, '@EditorToolType.Line')">@EditorResources.LineTool</a>
    </abbr>
</div>

<div id="newStopModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@EditorResources.GiveStopDetails</h4>
            </div>
            <div class="modal-body">
                <p>
                    <label>@EditorResources.StopName</label>
                    <input id="modalStopName" type="text" />
                </p>
                <p>
                    <label>@EditorResources.StationNumber</label>
                    <input id="modalStationNumber" type="number" min="1" 
                           onkeypress="return event.charCode >= 48"/>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" 
                        onclick="addStopToContainer()">@BaseResources.Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal" 
                        onclick="deleteLastMarker()">@BaseResources.Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="newLineModal" class="modal fade primary-element" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@EditorResources.NewLineCreation</h4>
            </div>
            <div class="modal-body">
                <p>
                    <label>@EditorResources.LineName</label>
                    <input id="modalLineName" type="text" />
                </p>
                <p>
                    <label>@EditorResources.LineColor</label>
                    <input id="modalLineColor" type="color" />
                </p>
                @*<p>
                    <label>@EditorResources.LineNumber</label>
                    <input id="modalLineNumber" type="number" min="1" 
                           onkeypress="return event.charCode >= 48" />
                </p>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal"
                        onclick="addLineToContainer()">
                    @BaseResources.Save
                </button>
                <button type="button" class="btn btn-default" data-dismiss="modal"
                        onclick="cancelNewLineCreation()">
                    @BaseResources.Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<script>  
    var toolboxOpened = false;
    
    var editedStops = { 'Added': [], 'Modified': [], 'Deleted': [] };
    var editedLines = { 'Added': [], 'Modified': [], 'Deleted': [] };
    var currentEditedLine = {};

    var lastStopLongitude;
    var lastStopLatitude;

    $(document).ready(function () {
        $("#toolboxButton").show();  
        $("#toolboxButton").click(switchToolboxSidenav);
        $("#saveModification").show();
        $("#saveModification").click(saveEverything);
    });

    function saveEverything() {
        saveStops();
        saveLines();
        location.reload();
    }

    function saveStops() {
        var sendData = { 'stopsEditionModel': editedStops };
        $.post("Editor/SaveStops",
            sendData,
            function (data, status) {
                editedStops = { 'Added': [], 'Modified': [], 'Deleted': [] };
                //alert("Data: " + data + "\nStatus: " + status);
            });
    }

    function saveLines() {
        var sendData = { 'linesEditionModel': editedLines };
        $.post("Editor/SaveLines",
            sendData,
            function (data, status) {
                editedLines = { 'Added': [], 'Modified': [], 'Deleted': [] };
                //alert("Data: " + data + "\nStatus: " + status);
            });
    }

    function onMapClick(coordinates) {
        if (currentTool == '@EditorToolType.BusStop') {
            placeBusMarkerAndCreateStop(coordinates);
        } 
        if (currentTool == '@EditorToolType.TramStop') {
            // tram tool
        }
    }

    function addStopToLine(marker) {
        var sendData = { 'id': marker.id };
        $.post("Editor/GetStop",
            sendData,
            function (data, status) {
                currentEditedLine.Stops.push(data);
            });
    }

    function addLineToContainer() {
        var newLine = {
            'Name': $("#modalLineName").val(),
            'Stops': [],
            'Color': $("#modalLineColor").val(),
        };
        allLines.Lines.push(newLine);
        editedLines.Added.push(newLine);
        currentEditedLine = newLine;
        $("#modalLineName").val('');
        $("#modalLineNumber").val('');
    }

    function cancelNewLineCreation() {
        currentEditedLine = {};
        setCurrentTool("#lineToolButton", '@EditorToolType.None');
    }

    function addStopToContainer() {
        var newStop = {
            'Name': $("#modalStopName").val(),
            'SiteNumber': $("#modalStationNumber").val(),
            'Longitude': lastStopLongitude,
            'Latitude': lastStopLatitude,
        };
        allLines.StopsWithoutLines.push(newStop);
        editedStops.Added.push(newStop);
        $("#modalStopName").val('');
        $("#modalStationNumber").val('');
    }   

    function placeBusMarkerAndCreateStop(coordinates) {        
        $("#newStopModal").modal({ backdrop: "static" });
        lastStopLatitude = coordinates.lat;
        lastStopLongitude = coordinates.lng;
        drawMarker(MAP, '', $("#modalStopName").val(), coordinates);
    }

    function setCurrentTool(toolButton, newTool) {
        if (newTool != '@EditorToolType.None' && currentTool != newTool) {
            currentTool = newTool;
            $(toolButton).css('color', '#ffffff');
        }
        else {
            currentTool = '@EditorToolType.None';
            currentEditedLine = {};
            $(toolButton).css('color', '#818181');
        }
        if (currentTool == '@EditorToolType.Line') {
            $("#newLineModal").modal();
        }
    }

    function switchToolboxSidenav() {
        if (toolboxOpened == false) {
            document.getElementById("toolboxSidenav").style.width = "250px";
            toolboxOpened = true;
        }
        else {
            document.getElementById("toolboxSidenav").style.width = "0";
            toolboxOpened = false;
        }
    }
</script>