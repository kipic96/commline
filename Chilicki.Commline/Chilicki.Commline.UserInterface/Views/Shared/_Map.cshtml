@using Chilicki.Commline.Application.Enums
@using Chilicki.Commline.UserInterface.HtmlExtensions
@using Chilicki.Commline.UserInterface.Resources

<script src="http://maps.google.com/maps/api/js?key=AIzaSyBWGMUQJXHJ6E0oOLMs-4Ps1hNCPo3zcno&sensor=true" type="text/javascript"></script>

<br />
<div id="map_canvas"></div>

<section class="scripts">
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    <script type="text/javascript">
        var stopIconSize = 18;
        var MAP;
        var allLines = { 'Lines': [], 'Stops': [] };
        var searchStops = { 'Stops': [] };
        var stopMarkerList = [];
        var polylineList = [];
        var currentTool = '@EditorToolType.None';
        var currentView = '@CommlineViewType.Other';
        var lineTypes = @(Html.LineTypeToString());
        var stopTypes = @(Html.StopTypeToString());

        var stopIcons = [ new google.maps.MarkerImage(
                'https://maps.gstatic.com/mapfiles/transit/iw2/6/bus.png',
                new google.maps.Size(stopIconSize, stopIconSize), //size
                null, //origin
                null, //anchor
                new google.maps.Size(stopIconSize, stopIconSize) //scale
            ),
            new google.maps.MarkerImage(
                'https://maps.gstatic.com/mapfiles/transit/iw2/6/tram.png',
                new google.maps.Size(stopIconSize, stopIconSize), //size
                null, //origin
                null, //anchor
                new google.maps.Size(stopIconSize, stopIconSize) //scale
            ) ];

        $(document).ready(function () {
            initializeMap();            
        });

        function initializeMap() {
            google.maps.visualRefresh = true;
            var Tychy = new google.maps.LatLng(50.120965, 19.015120);
            var styles =
                [
                    {
                        "featureType": "administrative",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "featureType": "poi",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "featureType": "road",
                        "elementType": "labels.icon",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "featureType": "transit",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    }
                ]
            var styledMap = new google.maps.StyledMapType(styles, { name: '@ViewData["viewName"]' });
            var mapOptions = {
                zoom: 13,
                center: Tychy,
                mapTypeControlOptions:
                    {
                        mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
                    }
            };
            MAP = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
            MAP.mapTypes.set('map_style', styledMap);
            MAP.setMapTypeId('map_style');

            google.maps.event.addListener(MAP, 'zoom_changed', function () {
                onZoomChanged(MAP);
            });

            google.maps.event.addListener(MAP, 'click', function (event) {
                onMapClick(event.latLng);
            });
        }

        function onZoomChanged(map) {
            var pixelSizeAtZoom0 = 5;
            var maxPixelSize = stopIconSize;
            var relativePixelSize = Math.round(pixelSizeAtZoom0 * Math.pow(2, map.getZoom()));
            if (relativePixelSize > maxPixelSize)
                relativePixelSize = maxPixelSize;
            if (map.getZoom() <= 12)
                relativePixelSize = 0;
            $.each(stopMarkerList, function (i, stopMarker) {
                stopMarker.setIcon(
                    new google.maps.MarkerImage(
                        stopMarker.icon.url,
                        null,
                        null,
                        null,
                        new google.maps.Size(relativePixelSize, relativePixelSize)
                    )
                );
            })
        }

        function onMapClick(coordinates) {
            // Do nothing
        }

        function addStopToLine(marker) {
            // Do nothing
        }

        function drawMarker(map, id, stopName, coordinates, stopType, stationNumber) {
            var stopIcon = getStopIconByStopType(stopType);
            var stopMarker = new google.maps.Marker({
                'position': coordinates,
                'map': map,
                'title': stopName,
                'icon': stopIcon,
                'id': id,
                'stopType': stopType,
            });

            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h4>" + stopTypes[stopType] + " </br>" + stopName + "</h4></div>"
            });

            if (stationNumber === undefined)
                stationNumber = '@BaseResources.NotSetYet';
            var readonlyWindow = new google.maps.InfoWindow({
                content: "<div class='readonlyInfoDiv'><h4>" + stopTypes[stopType] + " </br>" +
                    "@BaseResources.ReadonlyName " + stopName + "</h4><h5>" +
                    "@BaseResources.ReadonlyStationNumber " + stationNumber + "</br>" +
                    "@BaseResources.ReadonlyLongitude " + coordinates.lng() + "</br>" +
                    "@BaseResources.ReadonlyLatitude " + coordinates.lat() + "</br></h5></div>"
            });
            
            var searchWindow = new google.maps.InfoWindow({
                content: '<div class="searchInfoDiv"><h4>' + stopTypes[stopType] + ' </br>' + stopName + '</h4>' +
                    '<button type="button" class="btn btn-default" onclick="setStopAsStart(' + stopMarker.id + ', &quot;' + stopMarker.title + '&quot;)">@SearchResources.SetAsStartStop</button><br />' +
                    '<button type="button" class="btn btn-default" onclick="setStopAsEnd(' + stopMarker.id + ', &quot;' + stopMarker.title + '&quot;)">@SearchResources.SetAsEndStop</button>' +
                            '</div >'
            });

            google.maps.event.addListener(stopMarker, 'click', function () {
                if (currentView == '@CommlineViewType.Search') {
                    searchWindow.open(map, stopMarker);
                }
                else {
                    if (currentTool == '@EditorToolType.None')
                        readonlyWindow.open(map, stopMarker);
                    if (currentTool == '@EditorToolType.CreateLine')
                        addStopToLine(stopMarker);
                    if (currentTool == '@EditorToolType.EditStop')
                        editStopAction(stopMarker);
                    if (currentTool == '@EditorToolType.RemoveStop')
                        removeStopAction(stopMarker);
                }              
            });
            stopMarkerList.push(stopMarker);
            return stopMarker;
        }

        function drawAllStops(map, stops) {
            $.each(stops, function (stopIndex, stop) {
                drawMarker(map, stop.Id, stop.Name, new google.maps.LatLng(stop.Latitude, stop.Longitude), stop.StopType, stop.SiteNumber);
            });
        }

        function drawLine(map, lineId, lineName, lineType, stopList, color, routeType) {
            var stopLocations = [];
            $.each(stopList, function (i, stop) {
                stopLocations.push(new google.maps.LatLng(stop.Latitude, stop.Longitude));
            })

            if (color === null)
                color = getRandomColor();

            var stopPath = new google.maps.Polyline({
                path: stopLocations,
                strokeColor: color,
                strokeOpacity: 0.8,
                strokeWeight: 6,
                id: lineId,
                name: lineName,
                type: lineType,
                color: color,
                routeType: routeType
            });
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h4>" + lineTypes[lineType] + " " + lineName + "</h4></div>"
            });
            google.maps.event.addListener(stopPath, 'click', function (event) {
                if (currentTool == '@EditorToolType.EditLine') {
                    editLineAction(stopPath);                    
                }
                else {
                    infowindow.setPosition(event.latLng);
                    infowindow.open(map);
                }                
            });
            polylineList.push(stopPath);
            stopPath.setMap(map);
        }

        function drawDashedLine(map, stopList) {
            var stopLocations = [];
            $.each(stopList, function (i, stop) {
                var coordinates = new google.maps.LatLng(stop.Latitude, stop.Longitude);
                stopLocations.push(coordinates);
            })

            var dashedLineSymbol = {
                path: 'M 0,-1 0,1',
                strokeOpacity: 1,
                scale: 4
            };

            var stopPath = new google.maps.Polyline({
                path: stopLocations,
                strokeOpacity: 0,
                icons: [{
                    icon: dashedLineSymbol,
                    offset: '0',
                    repeat: '20px'
                }]
            });
            polylineList.push(stopPath);
            stopPath.setMap(map);
        }

        function drawAllLines(map, lines) {
            $.each(lines, function (i, line) {
                drawLine(map, line.Id, line.Name, line.LineType, line.Stops, line.Color, line.IsCircular);
            });
        }

        function removeAllPolylines(map) {
            $.each(polylineList, function (i, polyline) {
                polyline.setMap(null);
            });
        }

        function loadAllStops() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetAllStopsConnectedToAnyLine", "Home")',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (result) {
                    searchStops = result;
                    drawAllStops(MAP, searchStops);
                }
            });
        }

        function loadAllLines() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetAllLines", "Home")',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (result) {
                    allLines = result;
                    drawAllLines(MAP, result.Lines);
                    drawAllStops(MAP, result.Stops);
                }
            });
        }

        function getStopIconByStopType(stopType) {
            return stopIcons[stopType];
        }

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
    </script>
</section>