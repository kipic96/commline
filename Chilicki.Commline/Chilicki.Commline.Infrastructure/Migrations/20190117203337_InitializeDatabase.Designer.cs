// <auto-generated />
using System;
using Chilicki.Commline.Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chilicki.Commline.Infrastructure.Migrations
{
    [DbContext(typeof(CommlineDBContext))]
    [Migration("20190117203337_InitializeDatabase")]
    partial class InitializeDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.Departure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayType");

                    b.Property<TimeSpan>("DepartureTime");

                    b.Property<bool>("IsBetweenDays");

                    b.Property<bool>("IsOnNextDay");

                    b.Property<Guid>("RouteStopId");

                    b.Property<int>("RunIndex");

                    b.HasKey("Id");

                    b.HasIndex("RouteStopId");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<bool>("IsCircular");

                    b.Property<int>("LineType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.RouteStop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LineId");

                    b.Property<Guid>("StopId");

                    b.Property<int>("StopIndex");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("StopId");

                    b.ToTable("RouteStops");
                });

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.Stop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StopNumber");

                    b.Property<int>("StopType");

                    b.HasKey("Id");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.Departure", b =>
                {
                    b.HasOne("Chilicki.Commline.Domain.Entities.RouteStop", "RouteStop")
                        .WithMany("Departures")
                        .HasForeignKey("RouteStopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Chilicki.Commline.Domain.Entities.RouteStop", b =>
                {
                    b.HasOne("Chilicki.Commline.Domain.Entities.Line", "Line")
                        .WithMany("RouteStops")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chilicki.Commline.Domain.Entities.Stop", "Stop")
                        .WithMany("RouteStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
